{% extends "base.html.j2" %}

{% block content %}
<div class="container mx-auto p-0" style="height: 100vh; width: 100vw;">
    <div id="idle-message" class="flex flex-col items-center justify-center h-full w-full">
        <h1 class="text-3xl font-bold mb-4">FaceBot</h1>
        <p class="text-xl">Waiting for connection...</p>
    </div>
    <video id="webcam" autoplay playsinline class="w-full h-full object-cover hidden" style="height: 100vh; width: 100vw;"></video>
</div>
{% endblock content %}

{% block scripts %}
<script src="/static/js/peerjs.min.js"></script>
<script>
    var video_constraints = {
        video: {
            mandatory: {
                maxWidth: 640,
                maxHeight: 360,
            },
            quality: 7,
            width: { ideal: 320 },
            height: { ideal: 240 }
        }
    };

    window.botName = "FaceBot";
    window.peer = new Peer({ debug: 3 });

    async function getMedia(constraints) {
        let stream = null;
        try {
            stream = await navigator.mediaDevices.getUserMedia(constraints);
            return stream;
        } catch (err) {
            console.error('Error accessing media devices.', err);
            throw err;
        }
    }

    peer.on('open', function (id) {
        fetch(`/api/bot/${window.botName}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ peer_id: id, name: window.botName })
        }).then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        }).then(data => {
            console.log('Peer ID saved:', data);
            peer.on('connection', function (conn) {
                window.connection = conn;
                conn.on('open', function () {
                    // Receive messages
                    conn.on('data', function (data) {
                        console.log('Received', data);
                    });

                    // Send messages
                    conn.send('Hello!');
                });
            });
            peer.on('call', async function (call) {

                window.media = await getMedia({
                    video: video_constraints,
                    audio: true
                });
                call.answer(window.media);
                call.on('stream', function (stream) {
                    document.getElementById('idle-message').classList.add('hidden');
                    const video = document.getElementById('webcam');
                    video.classList.remove('hidden');
                    video.srcObject = stream;
                    video.onloadedmetadata = function () {
                        video.play();
                    };
                });
            });
        }).catch(error => {
            console.error('There was a problem with the fetch operation:', error);
        });
    });
</script>
{% endblock scripts %}