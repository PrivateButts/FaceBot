{% extends "base.html.j2" %}

{% block extrahead %}

{% endblock extrahead %}

{% block content %}

<div class="container mx-auto p-4">
    <h1 class="text-3xl font-bold mb-4">FaceBot - Client Interface</h1>
    <p class="mb-4">Client Name: <strong>{{ bot_name }}</strong></p>
    <div class="mb-4">
        <video id="webcam" autoplay playsinline class="w-full h-auto rounded-lg shadow-lg">
            <p>This will be replaced with the incoming webcam feed</p>
        </video>
    </div>
    <div id="controlPanel" class="mb-4">
        <h2 class="text-xl font-semibold mb-2">Camera Pan/Tilt Control</h2>

        <div class="flex flex-col gap-2">
            <div class="flex gap-2 items-center">
                <button id="pan-left" class="btn btn-primary" onclick="decPan()">Pan Left</button>
                <input id="pan-slider" type="range" min="0" max="180" x-model="pan" class="mx-2" onchange="sendPanTilt()">
                <button id="pan-right" class="btn btn-primary" onclick="incPan()">Pan Right</button>
            </div>
            <button id="reset-pan-tilt" class="btn btn-secondary" onclick="resetPanTilt()">Reset Pan/Tilt</button>
            <div class="flex gap-2 items-center">
                <button id="tilt-up" class="btn btn-primary" onclick="decTilt()">Tilt Down</button>
                <input id="tilt-slider" type="range" min="15" max="145" x-model="tilt" class="mx-2" onchange="sendPanTilt()">
                <button id="tilt-down" class="btn btn-primary" onclick="incTilt()">Tilt Up</button>
            </div>
        </div>
    </div>
</div>

{% endblock content %}


{% block scripts %}
<script src="/static/js/peerjs.min.js"></script>
<script>
    window.botName = "{{ bot_name }}";

    window.peer = new Peer({
        debug: 3
    });

    window.move_scale = 10;
    window.tiltPanData = {
        pan: 90,
        tilt: 90
    };

    var video_constraints = {
        video: {
            mandatory: {
                maxWidth: 640,
                maxHeight: 360,
                // maxAspectRatio:4/3,
                // maxFrameRate:1
                },
            quality: 7,
            width: { ideal: 320 },
            height: { ideal: 240 }
        }
    };

    async function getMedia(constraints) {
        let stream = null;

        try {
            stream = await navigator.mediaDevices.getUserMedia(constraints);
            return stream
        } catch (err) {
            console.error('Error accessing media devices.', err);
            throw err;
        }
    }

    peer.on('open', function (id) {
        fetch(`/api/bot/${window.botName}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            },
        }).then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        }).then(data => {
            console.log('Bot info:', data);
            window.botInfo = data.bot;
            connect(window.botInfo.peer_id);
        }).catch(error => {
            console.error('There was a problem with the fetch operation:', error);
        });
    });

    async function connect(peerId) {
        window.connection = peer.connect(peerId);
        window.connection.on('open', function () {
            // Receive messages
            window.connection.on('data', function (data) {
                console.log('Received', data);
            });

            // Send messages
            window.connection.send('Hello!');
        });

        window.media = await getMedia({
            video: video_constraints,
            audio: true
        });
        window.call = peer.call(peerId, window.media);
        window.call.on('stream', function (stream) {
            const video = document.getElementById('webcam');
            video.srcObject = stream;
            video.onloadedmetadata = function () {
                video.play();
            };
        });
    }

    // Sync sliders with JS state after backend update
    function syncSliders() {
        document.querySelector('#pan-slider').value = window.tiltPanData.pan;
        document.querySelector('#tilt-slider').value = window.tiltPanData.tilt;
    }

    // Global debounce for pan/tilt requests
    let panTiltDebounceTimer = null;
    function requestPanTilt() {
        if (panTiltDebounceTimer) clearTimeout(panTiltDebounceTimer);
        panTiltDebounceTimer = setTimeout(() => {
            sendPanTilt();
        }, 200); // 200ms debounce
    }

    document.querySelector('#pan-slider').addEventListener('input', function() {
        window.tiltPanData.pan = parseInt(this.value, 10);
        requestPanTilt();
    });
    document.querySelector('#tilt-slider').addEventListener('input', function() {
        window.tiltPanData.tilt = parseInt(this.value, 10);
        requestPanTilt();
    });

    function decPan() {
        window.tiltPanData.pan = Math.max(0, window.tiltPanData.pan - window.move_scale);
        syncSliders();
        requestPanTilt();
    }

    function incPan() {
        window.tiltPanData.pan = Math.min(180, window.tiltPanData.pan + window.move_scale);
        syncSliders();
        requestPanTilt();
    }

    function decTilt() {
        window.tiltPanData.tilt = Math.max(15, window.tiltPanData.tilt - window.move_scale);
        syncSliders();
        requestPanTilt();
    }

    function incTilt() {
        window.tiltPanData.tilt = Math.min(145, window.tiltPanData.tilt + window.move_scale);
        syncSliders();
        requestPanTilt();
    }

    document.addEventListener('DOMContentLoaded', function() {
        syncSliders();
    });

    resetPanTilt = function() {
        window.tiltPanData.pan = 90;
        window.tiltPanData.tilt = 90;
        syncSliders();
        sendPanTilt();
    };

    function sendPanTilt() {
        fetch(`/api/bot/${window.botName}/look`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                pan: window.tiltPanData.pan,
                tilt: window.tiltPanData.tilt
            })
        }).then(response => {
            if (!response.ok) {
                throw new Error('Failed to send pan/tilt');
            }
            return response.json();
        }).then(data => {
            console.log('Pan/Tilt updated:', data);
            syncSliders();
        }).catch(error => {
            console.error('Error sending pan/tilt:', error);
        });
    }
</script>

{% endblock scripts %}